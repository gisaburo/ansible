---
- name: list vms
  virt:
    command: list_vms
  register: result_vms

- name: exist vm 
  debug:
    msg: "'{{ cloud_init_instance_id }}' already exist"
  when: cloud_init_instance_id in result_vms.list_vms

- block:
  - name: check image file
    stat:
      path: '{{ image_download_path }}'
    register: result_file
    
  - name: get image
    get_url: url='{{ image_url }}'
            sha256sum='{{ image_sha256sum }}'
            dest='{{ image_download_path }}'
            force=True
    when: result_file.stat.exists == false

  - name: set image
    copy:
      src: '{{ image_download_path }}'
      dest: "{{ virt_pool_path }}/{{ cloud_init_instance_id }}.qcow2"

  - name: resize image
    shell: "qemu-img resize {{ virt_pool_path }}/{{ cloud_init_instance_id }}.qcow2 {{ virt_disk }}"
    
  - name: define vm
    shell: >
      virt-install \
      --name {{ cloud_init_instance_id }} \
      --ram {{ virt_ram }} \
      --vcpus {{ virt_vcpus }} \
      --os-type {{ virt_os_type }} \
      --os-variant {{ virt_os_variant }} \
      --virt-type {{ virt_type }} \
      --graphics none \
      --network bridge={{ virt_net_name }} \
      --noautoconsole \
      --disk {{ virt_pool_path }}/{{ cloud_init_instance_id }}.qcow2,format=qcow2 \
      --import \
      --cdrom /tmp/{{ cloud_init_instance_id }}.iso

  - name: Sleep for 300 seconds and continue with play
    wait_for:
      timeout: 60

  - name: ping
    shell: "ping -c 1 '{{ cloud_init_address }}'"
    register: result
    until: result.rc == 0
    retries: 100
    delay: 10

  - name: shutdown vm
    virt: 
      name: "{{ cloud_init_instance_id }}"
      command: shutdown

  - name: wait vm shutdown
    virt:
      name: "{{ cloud_init_instance_id }}"
      command: status
    register: result
    until: result.status == 'shutdown'
    retries: 100
    delay: 10

  - name: start vm
    virt: 
      name: "{{ cloud_init_instance_id }}"
      command: start

  - name: wait vm start
    virt:
      name: "{{ cloud_init_instance_id }}"
      command: status
    register: result
    until: result.status == 'running'
    retries: 100
    delay: 10

  - name: ping
    shell: "ping -c 1 '{{ cloud_init_address }}'"
    register: result
    until: result.rc == 0
    retries: 100
    delay: 10
  
  when: cloud_init_instance_id not in result_vms.list_vms